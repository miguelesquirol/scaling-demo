* {
  box-sizing: border-box;
}
html {
  font-size: 10px;
}

@function map-get-next($map, $key, $fallback: false, $return: value) {
  // Check if map is valid
  @if type-of($map) == map {
    // Check if key exists in map
    @if map-has-key($map, $key) {
      // Init index counter variable
      $i: 0;

      // Init key index
      $key-index: false;

      // Traverse map for key
      @each $map-key, $map-value in $map {
        // Update index
        $i: $i + 1;

        // If map key found, set key index
        @if $map-key == $key {
          $key-index: $i;
        }

        // If next index return next value or key based on $return
        @if $i == $key-index + 1 {
          @if $return == key {
            @return $map-key;
          } @else {
            @return $map-value;
          }
        }

        // If last entry return false
        @if $i == length($map) {
          @return $fallback;
        }
      }

      @warn 'No next map item for key #{$key}';
      @return $fallback;
    }

    @warn 'No valid key #{$key} in map';
    @return $fallback;
  }

  @warn 'No valid map';
  @return $fallback;
}


$scaling: (
  90: 1,
  100: 0.9165,
  110: 0.9165,
  120: 0.834,
  130: 0.75,
  140: 0.667,
  190: 1,
  210: 0.9165,
  230: 0.834,
  250: 0.75,
  280: 0.667,
  290: 0.667,
);

.dpi {
  display: none;
}

@for $i from 9 through 30 {
  @media (min-resolution: #{$i * 10 }dpi) and (max-resolution: #{$i * 10 + 9}dpi) {
    .dpi#{$i * 10} {
      display: block;
    }
  }
}

@mixin keep($property, $size) {
  #{$property}: $size;
  @each $dpi, $scale in $scaling {
    @media (min-resolution: #{$dpi}dpi) and (max-resolution: #{map-get-next($scaling,$dpi,$return:key) - 1}dpi) {
      #{$property}: $size * $scale;
    }
  }
}

@mixin scale($id) {
  @each $dpi, $scale in $scaling {
    @media (min-resolution: #{$dpi}dpi) and (max-resolution: #{map-get-next($scaling,$dpi,$return:key) - 1}dpi) {
      transform-origin: top left;
      transform: scale($scale);
      margin-bottom: calc(var(--#{$id}-height) * ($scale - 1));
    }
  }
}

@mixin showscale() {
  @media (max-resolution: 89dpi) {
    .zmin {
      display: block;
    }
  }

  @media (min-resolution: 281dpi) {
    .zmax {
      display: block;
    }
  }

  @each $dpi, $scale in $scaling {
    @media (min-resolution: #{$dpi}dpi) and (max-resolution: #{map-get-next($scaling,$dpi,$return:key) - 1}dpi) {
      .z#{$dpi} {
        display: block;
      }
    }
  }

  @media (min-resolution: 280dpi) {
    .zmax {
      display: block;
    }
  }
}

// @mixin keep($property, $size) {
//   #{$property}: $size;
//   @each $dpi, $scale in $scaling {
//     @media (min-resolution: #{$dpi}dpi) and (max-resolution: #{$dpi + 10}dpi) {
//       #{$property}: $size * $scale;
//     }
//   }
// }

// @mixin scale($id) {
//   @each $dpi, $scale in $scaling {
//     @media (min-resolution: #{$dpi}dpi) and (max-resolution: #{$dpi + 10}dpi) {
//       transform-origin: top left;
//       transform: scale($scale);
//       margin-bottom: calc(var(--#{$id}-height) * ($scale - 1));
//     }
//   }
// }

// @mixin showscale() {
//   @media (max-resolution: 300dpi) {
//     .zmin {
//       display: block;
//     }
//   }

//   @each $dpi, $scale in $scaling {
//     @media (min-resolution: #{$dpi}dpi) and (max-resolution: #{$dpi + 10}dpi) {
//       .z#{$dpi} {
//         display: block;
//       }
//     }
//   }

//   @media (min-resolution: 450dpi) {
//     .zmax {
//       display: block;
//     }
//   }
// }

body {
  @include keep(margin, 20px);
}
h2 {
  font-size: 2rem;
}

br {
  @include keep(height, 20px);
  @include keep(line-height, 20px);
}

.scale {
  position: absolute;
  @include keep(top, 20px);
  @include keep(right, 20px);
  width: 300px;
  border: 1px solid black;
  padding: 20px;
  transform-origin: top right !important;
  @include showscale();
  @include scale("scale");

  p {
    font-size: 18px;
    display: none;
  }
}

.fixed-box {
  border: 1px solid #000;

  h2 {
    @include keep(font-size, 2rem);
  }

  position: relative;

  @include keep(width, 300px);
  @include keep(height, 200px);
  @include keep(padding, 40px);

  background: #fff;
  max-width: 100%;
}

.fixed-box2 {
  position: relative;
  width: 300px;
  height: 200px;
  padding: 40px;
  background: #fff;
  max-width: 100%;
  border: 1px solid #000;
}

.fixed-box3 {
  position: relative;
  width: 300px;
  height: 200px;
  padding: 40px;
  background: #fff;
  max-width: 100%;
  border: 1px solid #000;
}

.separator {
  display: block;
  @include keep(height, 20px);
  width: 100%;
}
[data-scaleid="box1"] {
  height: 200px;
  @include scale("box1");
}

[data-scaleid="box2"] {
  height: 150px;
  @include scale("box2");
}
